{"version":3,"sources":["img/logo.png","Report.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Issue","id","text","answers","_this","this","Object","classCallCheck","getId","setConflicts","conflicts","getConflicts","getAnswer","questionId","getText","Question","shortdesc","_this2","setAsked","asked","getAsked","getDescription","Solution","issue_id","_this3","getIssueId","Report","_this4","getQuestionText","currentQuestion","getQuestionDescription","hasMoreQuestions","moreQuestions","hasIssueSuggestion","issueSuggestion","nextQuestion","best_score","best_question_id","questionFound","q","questions","counter","i","issues","issue","posprob","length","score","Math","log","getIssueSuggestion","suggestions","setSuggestionAnswer","s","foundIssue","solutions","console","foundSolution","setQuestionAnswer","answer","new_issues","push","getResult","hasSolution","getSolutions","sols","setSolutionAnswer","FaultReport","props","possibleConstructorReturn","getPrototypeOf","call","resetReport","setState","report","qcount","textarea_value","textname_value","textemail_value","phone_value","apart_value","address_value","positive_answers","handleClick","idx","currentChoice","getTextbox","react_default","a","createElement","className","rows","cols","getNextQuestion","state","getQuestion","answerReport","answerSuggestion","answerSolution","handleChange","e","defineProperty","target","name","value","sendReport","preventDefault","templateParams","from_name","to_name","report_id","floor","random","message_html","phone_number","fault_adress","apartment_number","to_email","problem","emailjs","then","response","status","err","getQuestions","onClick","res","keys","map","key","index","assertThisInitialized","tabIndex","Parser","type","onChange","accept","capture","src","Logotype","alt","Component","App","App_FaultReport","Boolean","window","location","hostname","match","ReactDOM","render","HashRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15349dee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.896b6e24.png\";","/**\n *  An actual issue.\n *  Conflicts is true if the issue conflicts to an answer of\n *  at least on question.\n *  answers is a list of true/false for each question.\n */\nclass Issue {\n    constructor(id, text, answers) {\n        this.id = id;\n        this.text = text;\n        this.conflicts = false;\n        this.answers = answers;\n    }\n\n    getId = () => {\n        return this.id;\n    }\n\n    setConflicts = () => {\n        this.conflicts = true;\n    }\n\n    getConflicts = () => {\n        return this.conflicts;\n    }\n\n    getAnswer = (questionId) => {\n        return this.answers[questionId] === 1 ? true : false;\n    }\n\n    getText = () => {\n        return this.text;\n    }\n}\n\n/** \n *  A question.\n *  id: an id\n *  text: the actual question\n *  shortdesc: an short description\n */\nclass Question {\n    constructor(id, text, shortdesc) {\n        this.id = id;\n        this.text = text;\n        this.asked = false;\n        this.shortdesc = shortdesc;\n    }\n\n    getId = () => {\n        return this.id;\n    }\n\n    setAsked = () => {\n        this.asked = true;\n    }\n\n    getAsked = () => {\n        return this.asked;\n    }\n\n    getText = () => {\n        return this.text;\n    }\n\n    getDescription = () => {\n        return this.shortdesc;\n    }\n}\n\n/** \n *  A solution to the issue with issue_id.\n *  id: an id\n *  text: the actual question\n *  shortdesc: an short description\n */\nclass Solution {\n    constructor(id, issue_id, shortdesc, text) {\n        this.id = id;\n        this.issue_id = issue_id;\n        this.shortdesc = shortdesc;\n        this.text = text;\n    }\n\n    getId = () => {\n        return this.id;\n    }\n\n    getIssueId = () => {\n        return this.issue_id;\n    }\n\n    getDescription = () => {\n        return this.shortdesc;\n    }\n\n    getText = () => {\n        return this.text;\n    }\n}\n\n/**\n *  The fault report AI, aka För Valter.\n *  Handles which question should be asked\n *  and find the issue.\n *\n *  Questions and issues should be fetched from backend?\n */\nclass Report {\n    constructor() {\n        this.questions = [\n            new Question(0, \"Hittar vi felet inomhus?\",                             \"Vart på Fastigheten: Huset\"),\n            new Question(1, \"Är det fel på något i lägenheten?\",                    \"Vart i Huset: Lägenheten\"),\n            new Question(2, \"Hittar vi felet i badrummet?\",                         \"Vart i Lägenheten: Badrummet\"),\n            new Question(3, \"Vill du felanmäla något i köket?\",                     \"Vart i Lägenheten: Köket\"),\n            new Question(4, \"Är det fel på något i tvättstugan?\",                   \"Vart i huset: Tvättstugan\"),\n            new Question(5, \"Vill du felanmäla en vitvara?\",                        \"Kategori: En Vitvara\"),\n            new Question(6, \"Vill du felanmäla något som går på ström?\",            \"Kategori: Strömförsörjt\"),\n            new Question(7, \"Är det något som inte fungerar?\",                      \"Kategori: Trasigt\"),\n            new Question(8, \"Har felet med temperaturen i lägenheten att göra?\",    \"Kategori: Temperatur\"),\n            new Question(9, \"Strular TV, Internet eller telefonin?\",                \"Kategori: TV, Telefoni & Bredband\"),\n            new Question (10, \"Behöver objektet vatten för att fungera?\",           \"Kategori: Kommer i kontakt med vatten\"),\n        ];\n\n        this.issues = [\n                                                //   0  1  2  3  4  5  6  7  8  9 10  \n            new Issue(0, \"Badkar\",                  [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1]),\n            new Issue(1, \"Spisen\",                  [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0]),\n            new Issue(2, \"Tvättmaskin\",             [1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1]),\n            new Issue(3, \"Nerskräpning\",            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),\n            new Issue(4, \"Delad tvättmaskin\",       [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1]),\n            new Issue(5, \"Delad torktumlare\",       [1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0]),\n            new Issue(6, \"Spisfläkt\",               [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0]),\n            new Issue(7, \"För varmt i lägenheten\",  [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0]),\n            new Issue(8, \"För kallt i lägenheten\",  [1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0]),\n            new Issue(9, \"TV, Bredband & Telefoni\", [1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0]),\n            new Issue(10, \"Toalett\",                [1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 1]),\n            new Issue(11, \"Kylen\",                  [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0]),\n            new Issue(12, \"Frysen\",                 [1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 0]),\n            new Issue(13, \"Utomhusbelysning\",       [0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]),\n            new Issue(14, \"Belysning inomhus\",      [1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0]),\n        ];\n\n        // List of solutions connected to issues?\n        this.solutions = [\n            new Solution(0, 6, \"\", \n                \"Det vanligaste felet som sker med fläkten är att filtret behöver rengöras eller bytas.\\\n                <br/><br/>\\\n                Fläktfiltret är en så kallad förbrukningsvara, vilket är en vara som du som hyresgäst ansvarar för att underhålla, byta och köpa.\\\n                 Andra förbrukningsvaror är till exempelvis glödlampor. \\\n                 Med vänligaste hälsningar, Valter\"),\n\n            new Solution(1, 6, \"Beställ ett fläktfilter som passar just din fläkt\", \n                \"Länken tar dig till ett filter som passar din \\\n                fläkt <a href='https://www.kjell.com/se/sortiment/hem-kontor-fritid/kokstillbehor/flaktfilter/aktivt-kolfilter-for-koksflakt-250-g-m--p60409'>kjell co</a>\"),\n\n            new Solution(2, 6, \"Här hittar du en video som visar hur man byter & rengör fläktfiltret\",\n                \"<a href='https://www.youtube.com/watch?v=Xd1_RzjBPpc'>youtube video</a>\"), \n\n            new Solution(3, 9, \"\",\n                \"Ibland så är det knepigt med tekniken och jag som är din digitala fastighetsförvaltare ger gärna några tips på hur man kan lösa strulet, \\\n                men det är förvaltaren eller fastighetsägaren som avhjälper felet då de inte får lägga sig i hur hyresgäster vill koppla upp sig. I huset så levererar COM-HEM TV och bredband via COM-HEM uttagen. Grundutbudet levereras till alla hushåll,men internet beställer vardera hyresgäst själv från COM-HEM.\" ),\n\n            new Solution(4, 9, \"Är det något som inte fungerar med TV;n eller internetet?\",\n                \"Antingen kan kontakta COM-HEMs kundtjänst på 92 222 eller felsöka själv via deras guide som du hittar via denna länk https://www.comhem.se/bredband \"),\n\n            new Solution(5, 9, \"Beställ Bredband, TV eller telefoni från COM-HEM\", \n            \"https://www.comhem.se/bredband\" ),\n\n            new Solution(6, 7, \"Vad gäller generellt?\", \n            \"Folkhälsomyndigheten rekommenderar att temperaturen i en lägenhet bör vara mellan 20 och 23 grader. \\\n            Temperaturen ska aldrig vara lägre än 18 grader, och inte varmare än 26 grader på sommaren – med vissa undantag.\"),\n\n            new Solution(6, 7, \"Vad gäller vid värmebölja?\", \n            \"Vid extrema väderförhållanden gäller inte Folkhälsomyndighetens allmänna råd. Under en värmebölja kan du som hyresgäst behöva acceptera temperaturer upp till 28 grader.\"),\n\n            new Solution(6, 7, \"Tips för att kyla ner lägenheten\", \n            \"Två saker som hjälper under värmebölja är dra ner persienner och gardiner, vädra på nätterna och dricka ordentligt med vatten. \\\n            Behövs det ytterligare svalkning så kan även en fläckt svalka - Här hittar fläkten som vi som programmerar valter använder under varma sommardagar https://www.clasohlson.com/se/Golvfl%C3%A4kt-42-cm-/36-7816 \"),\n\n            new Solution(7, 8, \"Vad gäller generellt?\", \n            \"Folkhälsomyndigheten rekommenderar att temperaturen i en lägenhet bör vara mellan 20 och 23 grader. \\\n            Temperaturen ska aldrig vara lägre än 18 grader, och inte varmare än 26 grader på sommaren – med vissa undantag.\"),\n\n\n        ];  \n\n        this.moreQuestions = true;\n        this.issueSuggestion = false;\n        this.foundIssue = null;\n        this.foundSolution = false;\n        this.currentQuestion = this.questions[0];\n        this.questions[0].setAsked();\n    }\n        \n    /**\n     *  Get the text for current question.\n     */\n    getQuestionText = () => {\n        return this.currentQuestion.getText();\n    }\n\n    /**\n     *  Get the description for current question.\n     */\n    getQuestionDescription = () => {\n        return this.currentQuestion.getDescription();\n    }\n\n    /**\n     *  Returns if there are more questions that\n     *  can be asked.\n     */\n    hasMoreQuestions = () => {\n        return this.moreQuestions;\n    }\n\n    hasIssueSuggestion = () => {\n        return this.issueSuggestion;\n    }\n\n    /**\n     *  Find the next question to ask.\n     *  Base on:\n     *  - The question is not already asked.\n     *  - There are issue that depend on the question.\n     */\n    nextQuestion = () => {\n        // look for a unasked question\n        let best_score = 0;\n        let best_question_id = -1;\n        let questionFound = false;\n        const eps = 0.00000000001;\n        for(let q in this.questions) {\n            let question = this.questions[q];\n            if(!question.getAsked()) {\n\n                // Make sure the question is the most relevant one\n                let counter = 0;\n                for(let i in this.issues) {\n                    let issue = this.issues[i];\n                    if(!issue.getConflicts() && issue.getAnswer(q)) {\n                        counter++;\n                    }\n                }\n                const posprob = counter/this.issues.length;\n                const score = \n                    -(posprob)*Math.log(posprob+eps) \n                    +(1-posprob)*Math.log(1-posprob+eps);\n                if (score > best_score && counter !== 0) {\n                    best_score = score;\n                    best_question_id = q;\n                    questionFound = true;\n                }\n            }\n        }\n\n        if(questionFound) {\n            this.currentQuestion = this.questions[best_question_id];\n            this.questions[best_question_id].setAsked();\n        } else {\n            this.moreQuestions = false;\n            for (let i in this.issues) {\n                if(!this.issues[i].getConflicts()) {\n                    this.issueSuggestion = true;\n                }\n            }\n        }\n    }\n\n    /** \n     *  Returns an object of all issues left.\n     *  IMPROVEMENT: Only return the 5 most likely.\n     */\n    getIssueSuggestion = () => {\n        let suggestions = {};\n        for (let i in this.issues) {\n            let issue = this.issues[i];\n            if(!issue.getConflicts()) {\n                suggestions[i] = issue.getText();\n            }\n        }\n        return suggestions;\n    }\n\n    /**\n     *  Get the answer from the suggested issues.\n     */\n    setSuggestionAnswer = (id) => {\n        if(id !== -1) {\n            this.foundIssue = this.issues[id];\n            // Check for solution\n            for (let s in this.solutions) {\n                if(this.solutions[s].getIssueId() === this.foundIssue.getId()) {\n                    console.log(\"Found solution! \" + s);\n                    this.foundSolution = true;\n                    break;\n                }\n            }\n        }\n        this.issueSuggestion = false;   \n    }\n\n    /**\n     *  Mark issues that conflicts to the answer\n     *  of the current question.\n     */\n    setQuestionAnswer = (answer) => {\n        let new_issues = [];\n        for(let i in this.issues) {\n            let issue = this.issues[i];\n            if(issue.getAnswer(this.currentQuestion.getId()) !== answer) {\n                issue.setConflicts();\n            } else {\n                new_issues.push(issue);\n            }\n        }\n\n        this.issues = new_issues;\n    }\n\n    /**\n     *  Returns the chosen issue.\n     */\n    getResult = () => {\n        if(this.foundIssue !== null) {\n            return this.foundIssue.getText();\n        }\n        return null;\n    }\n\n    /**\n     *  Return true if there exists a possible solution \n     *  to the selected issue.\n     */\n    hasSolution = () => {\n        return this.foundSolution;\n    }\n\n    /**\n     *  returns a solution for this.foundissue\n     */\n    getSolutions = () => {\n        // Returns a solution for this.foundIssue\n        let sols = {}\n        for (let s in this.solutions) {\n            if(this.solutions[s].getIssueId() === this.foundIssue.getId()) {\n                sols[s] = [\n                    this.solutions[s].getDescription(), \n                    this.solutions[s].getText(), \n                ];\n                this.foundSolution = true;\n            }\n        }\n        console.log(\"solutions: \" + sols);\n        return sols;\n    }\n\n    /**\n     *  Set the answer for the suggested solution.\n     *  answer: boolean\n     */\n    setSolutionAnswer = (answer) => {\n        if(answer) {\n            // We are done!\n        } else {\n            // Let user report issue.\n        }\n        this.foundSolution = false;\n    }\n}\n\nexport default Report;\n","import Parser from 'html-react-parser';\nimport React, { Component } from 'react';\nimport Report from './Report';\nimport './App.scss';\nimport Logotype from './img/logo.png';\nimport * as emailjs from 'emailjs-com';\n\nclass FaultReport extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            report: new Report(),\n            qcount: 0, // Just to update the component\n            textarea_value: '',\n            textname_value: '',\n            textemail_value: '',\n            phone_value: '',\n            apart_value: '',\n            address_value: '',\n            positive_answers: [],\n        };\n\n    }\n\n    resetReport =() => {\n        this.setState({report: new Report()});\n        this.setState({qcount: 0});\n        this.setState({textarea_value: ''});\n        this.setState({textname_value: ''});\n        this.setState({textemail_value: ''});\n        this.setState({phone_value: ''});\n        this.setState({apart_value: ''});\n        this.setState({address_value: ''});\n        this.setState({positive_answers: []});\n\n    }\n\n    handleClick = (idx) => {\n        this.setState({currentChoice: idx});\n    }\n\n    getTextbox = () => {\n        return (\n            <div className=\"FaultReportText\">\n            <div className=\"FaultReportHeader\">Beskriv problemet:</div>\n            <textarea rows=\"20\" cols=\"50\" />\n            <br/>\n            <button className=\"FaultReportButton\">Skicka</button>\n            </div>\n        );\n    }\n\n    getNextQuestion = () => {\n        let q = this.state['report'].getQuestion();\n        if(q != null) {\n            this.setState({currentQuestion: q});\n        } else {\n            this.setState({moreQuestions: false});\n        }\n    }\n\n    answerReport = (answer) => {\n        if(answer) {\n            this.state['positive_answers'].push(\n                this.state['report'].getQuestionDescription());\n        }\n        console.log(this.state['positive_answers']);\n        this.state['report'].setQuestionAnswer(answer);\n        this.state['report'].nextQuestion();\n        this.setState({'qcount': this.state['qcount'] + 1}); // update component\n    }\n\n    answerSuggestion = (id) => {\n        this.state['report'].setSuggestionAnswer(id); \n        this.setState({'qcount': this.state['qcount'] + 1});\n    }\n\n    answerSolution = (id) => {\n        if (id == -1) {\n            this.state['report'].setSolutionAnswer(id); \n            this.setState({'qcount': this.state['qcount'] + 1});\n        } else {\n            this.resetReport();\n        }\n    }\n\n    getResult = () => {\n        if(this.state['report'].getResult() != null) {\n            return (<span>Identifierat fel: {this.state['report'].getResult()}</span>);\n        } else {\n            return (<span>Hej, Valter här! <br/> Tyvärr så hittade jag ingen lösning på din felanmälan. <br/>\n             Beskriv felet nedan så kommer din riktiga fastighetsförvaltare hjälpa dig inom kort. </span>);\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    sendReport = (e) => {\n        e.preventDefault();\n        let templateParams = {\n            from_name: \"Nejbor\",\n            to_name: this.state['textname_value'],\n            report_id: Math.floor(Math.random() * 1000) + 100,\n            message_html: this.state['textarea_value'],\n            phone_number: this.state['phone_value'],\n            fault_adress: this.state['address_value'],\n            apartment_number: this.state['apart_value'],\n            to_email: this.state['textemail_value'],\n            problem: '',\n            answers: '',\n        };\n\n        if (this.state['report'].getResult() !== null) {\n            templateParams['problem'] = this.state['report'].getResult();\n        }\n\n        templateParams['answers'] += \"<ul>\";\n        for (let i in this.state['positive_answers']) {\n            templateParams['answers'] += \n                \"<li>\" + this.state['positive_answers'][i] + \"</li>\";\n        }\n        templateParams['answers'] += \"</ul>\";\n\n        emailjs.send(\n            'gmail', \n            'template_7tYScFrN', \n            templateParams, \n            'user_z3koOKn5N8lxWwWIlvVob')\n            .then(function (response) {\n                console.log(\"Success!\", response.status, response.text);\n            }, function(err) {\n                console.log(err);\n            }\n        );\n\n    }\n\n    getQuestions = () => {\n        if(this.state['report'].hasMoreQuestions()) {\n            return (\n                <div className=\"FaultReportQuestions\">\n                <div className=\"FaultReportQuestionsQuestion\">\n                {this.state['report'].getQuestionText()}\n                </div>\n                <div className=\"FaultReportQuestionsChoices\">\n               \n                <div className=\"FaultReportQuestionsItem NegChoice\"\n                onClick={()=>this.answerReport(false)}>\n                <div className=\"FaultReportQuestionsItemText\">\n                Nej\n                </div>\n                </div>\n                <div className=\"FaultReportQuestionsItem\"\n                onClick={()=>this.answerReport(true)}>\n                <div className=\"FaultReportQuestionsItemText\">\n                Ja\n                </div>\n                </div>\n                \n                </div>\n                </div>\n            );\n        } else if (this.state['report'].hasIssueSuggestion()) {\n            const issues = this.state['report'].getIssueSuggestion();\n            const res = Object.keys(issues).map( \n                function(key, index) {\n                return (<div className=\"FaultReportSuggestionItem\"\n                    key={key}\n                    onClick={()=>this.answerSuggestion(key)}>\n                    {issues[key]}\n                    </div>);\n            }, this);\n            return(\n                <div className=\"FaultReportSuggestion\">\n                    Har du problem med något av följande?\n                    <div className=\"FaultReportSuggestionChoices\">\n                        {res}\n                        <div className=\"FaultReportSuggestionItem NegChoice\"\n                            onClick={()=>this.answerSuggestion(-1)}>\n                            Nej\n                        </div>\n                    </div>\n                </div>\n            );\n        } else if(this.state['report'].hasSolution()) {\n            const solutions = this.state['report'].getSolutions();\n            console.log(\"sols: \" + solutions+\" len: \"+ Object.keys(solutions).length);\n            const res = Object.keys(solutions).map( \n                function(key, index) {\n                console.log(key + \" : \" + index);\n                return (<div className=\"FaultReportSolutionItem\"\n                    key={key}\n                    onClick={()=>{}}\n                    tabIndex=\"1\">\n                    <div className=\"FaultReportSolutionItemHeader\">\n                        {solutions[key][0]}\n                    </div>\n                    <div className=\"FaultReportSolutionItemText\">\n                        {Parser(solutions[key][1])}\n                    </div> \n                    {(() => {\n                        if (key==0 & Object.keys(solutions).length>1){\n                            return <div> Här hittar du några svar och lösningar problem:</div>\n                        }\n                    })()}\n                    </div>\n                    );\n            }, this);\n            return(\n                <div className=\"FaultReportSolutions\">\n                    Hej Valter här! \n                    <br/>\n\n                    <div className=\"FaultReportSolutionChoices\">\n                        {res}\n                        <br/>\n                        Lyckades jag avhjälpa felet?\n                        <div className=\"FaultReportSolutionItem PosChoice\"\n                            onClick={()=>this.answerSolution(1)}>\n                            Ja\n                        </div>\n                        <div className=\"FaultReportSolutionItem NegChoice\"\n                            onClick={()=>this.answerSolution(-1)}>\n                            Nej\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"FaultReportResult\">\n                <div className=\"FaultReportResultQuestion\">\n                {this.getResult()}\n                </div>\n                <div className=\"FaultReportResultInput\">\n                <br/>\n                Namn:\n                <br/>\n                <input \n                    type=\"text\"\n                    name=\"textname_value\"\n                    onChange={(e)=>this.handleChange(e)}/>\n                <br/>\n                Email:\n                <br/>\n                <input \n                    type=\"email\"\n                    name=\"textemail_value\"\n                    onChange={(e)=>this.handleChange(e)}/>\n                <br/>\n                Adress:\n                <br/>\n                <input \n                    type=\"text\"\n                    name=\"address_value\"\n                    onChange={(e)=>this.handleChange(e)}/>\n                <br/>\n                Telefon Nr:\n                <br/>\n                <input \n                    type=\"tel\"\n                    name=\"phone_value\"\n                    onChange={(e)=>this.handleChange(e)}/>\n                <br/>\n                Lägenhetsnr:\n                <br/>\n                <input \n                    type=\"number\"\n                    name=\"apart_value\"\n                    onChange={(e)=>this.handleChange(e)}/>\n                <br/>\n                Lägg till bild: \n                <br/>\n                <input type=\"file\" accept=\"image/*\" capture/>\n                <br/>\n                <br/>\n                Beskriv problemet:\n                <br/>\n                <br/>\n                <textarea \n                    rows=\"10\" cols=\"40\"\n                    name=\"textarea_value\"\n                    onChange={(e)=>this.handleChange(e)}/>\n                <br/>\n                <br/>\n                <button type=\"button\"\n                onClick={(e)=>this.sendReport(e)}>\n                Skicka Felanmälan</button\n                >\n                </div>\n                </div>\n            );\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"FaultReport\">\n            <img src={Logotype} alt=\"\"/>\n            <h1 className=\"FaultReportTitle\">Felanmälan</h1>\n            {this.getQuestions()}\n            </div>\n        );\n    }\n}\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n            <div className=\"Screen\">\n            <FaultReport />\n            </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}