{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["MenuBar","props","react_default","a","createElement","className","Link","to","FaultReport","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","idx","setState","currentChoice","getTextbox","rows","cols","getChoices","state","length","keys","choices","map","key","index","_this2","onClick","assertThisInitialized","1","2","3","4","5","6","7","8","9","10","11","12","Component","Post","header","body","Wall","App_Post","Bookable","BookingBookables","App_Bookable","BookableSelected","id","match","params","parseInt","days","i","push","Schedule","Booking","Switch","Route","path","component","Profile","class","App","exact","Boolean","window","location","hostname","ReactDOM","render","HashRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sSAMA,SAASA,EAAQC,GACb,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,cAAcE,GAAG,YAC7BL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,2BAEjBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,cAAcE,GAAG,KAC7BL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAEjBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,cAAcE,GAAG,gBAC9BL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BAEhBH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,cAAcE,GAAG,YAC7BL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,6BAMvBG,cACF,SAAAA,EAAYP,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACfC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMX,KA6BVe,YAAc,SAACC,GACXR,EAAKS,SAAS,CAACC,cAAeF,KA/BfR,EAkCnBW,WAAa,WACT,OACIlB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,qBACsBH,EAAAC,EAAAC,cAAA,WAClBF,EAAAC,EAAAC,cAAA,YAAUiB,KAAK,KAAKC,KAAK,OACzBpB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,0BAxCOK,EA6CnBc,WAAa,SAACN,GACV,OAAGA,EAAMR,EAAKe,MAAL,QAAsBC,OACff,OAAOgB,KAAKjB,EAAKe,MAAMG,QAAQV,IAAMW,IAC7C,SAASC,EAAKC,GAAO,IAAAC,EAAAnB,KACrB,OAAQV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACnBwB,IAAKA,EACLG,QAAS,kBAAID,EAAKf,YAAYa,KACzBjB,KAAKY,MAAL,QAAsBP,GAAKY,KAL5BnB,OAAAuB,EAAA,EAAAvB,QAAAuB,EAAA,EAAAvB,CAAAD,KAULA,EAAKW,cAvDhBX,EAAKe,MAAQ,CACTL,cAAe,EACfQ,QAAS,CACL,CACIO,EAAG,gBACHC,EAAG,kBACHC,EAAG,WAEP,CACIC,EAAG,SACHC,EAAG,SACHC,EAAG,UAEP,CACIC,EAAG,gBACHC,EAAG,WACHC,EAAG,UAEP,CACIC,GAAI,kBACJC,GAAI,iBACJC,GAAI,kBAvBDpC,wEA8Df,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACVO,KAAKW,WAAWX,KAAKY,MAAL,wBAnEXsB,aA0EpBC,EAAO,SAAC9C,GACV,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACVJ,EAAM+C,QAEX9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACVJ,EAAMgD,QAMjBC,EAAO,WACT,OACIhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAC+C,EAAD,CAAMH,OAAO,oBAAiBC,KAAK,kJAInC/C,EAAAC,EAAAC,cAAC+C,EAAD,CAAMH,OAAO,YAAYC,KAAK,gFAG9B/C,EAAAC,EAAAC,cAAC+C,EAAD,CAAMH,OAAO,MAAMC,KAAK,mCAK9BG,EAAW,SAACnD,GACd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACVJ,EAAM+C,QAEX9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVJ,EAAMgD,QAMjBI,EAAmB,WACrB,OACInD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,eAAeE,GAAG,cAC9BL,EAAAC,EAAAC,cAACkD,EAAD,CAAUN,OAAO,gBAAaC,KAAK,MAEvC/C,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,eAAeE,GAAG,cAC9BL,EAAAC,EAAAC,cAACkD,EAAD,CAAUN,OAAO,oBAAiBC,KAAK,MAE3C/C,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMD,UAAU,eAAeE,GAAG,cAC9BL,EAAAC,EAAAC,cAACkD,EAAD,CAAUN,OAAO,kBAAeC,KAAK,QAO/CM,EAAmB,SAACtD,GACtB,IAQmBuD,EAUnB,OACItD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAZJmD,EAaIvD,EAAMwD,MAAMC,OAAOF,GAZlB,IAAjBG,SAASH,GACAtD,EAAAC,EAAAC,cAAA,2BACe,IAAjBuD,SAASH,GACPtD,EAAAC,EAAAC,cAAA,+BAEAF,EAAAC,EAAAC,cAAA,+BASRF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAvBN,WAEb,IADA,IAAIuD,EAAO,GACHC,EAAI,EAAGA,GAAK,GAAIA,IACpBD,EAAKE,KAAK5D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBwB,IAAKgC,GAAKA,IAE7D,OAAQ3D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBAAyBuD,GAmBvCG,MAMXC,EAAU,SAAC/D,GACb,OACIC,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,KACI/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAOC,KAAK,eAAeC,UAAWb,IACtCrD,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWf,MAKxCgB,EAAU,WACZ,OACInE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,iBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,KAAGkE,MAAM,iBAEbpE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,gCAEIH,EAAAC,EAAAC,cAAA,WAFJ,YAIIF,EAAAC,EAAAC,cAAA,WAJJ,yBAMIF,EAAAC,EAAAC,cAAA,cA2BDmE,mLAnBX,OACErE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,KACI/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAOM,OAAK,EAACL,KAAK,IAAIC,UAAWlB,IACjChD,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAOC,KAAK,eAAeC,UAAW5D,IACtCN,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAOC,KAAK,eAAeC,UAAWJ,IACtC9D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWJ,IAClC9D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWC,MAG1CnE,EAAAC,EAAAC,cAACJ,EAAD,eAdM8C,aChNE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,uECXNoB,IAASC,OACL5E,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,KACI7E,EAAAC,EAAAC,cAAC4E,EAAD,OAENC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.13f2d904.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\n\nimport './App.css';\n\nfunction MenuBar(props) {\n    return (\n        <div className=\"MenuBar\">\n            <Link className=\"MenuBarItem\" to=\"/booking\">\n                <i className=\"fas fa-calendar-check\"></i>\n            </Link>\n            <Link className=\"MenuBarItem\" to=\"/\">\n                <i className=\"fas fa-home\"></i>\n            </Link>\n            <Link className=\"MenuBarItem\" to=\"/faultreport\">\n               <i className=\"fas fa-file-medical-alt\"></i>\n            </Link>\n            <Link className=\"MenuBarItem\" to=\"/profile\">\n                <i className=\"fas fa-user-circle\"></i>\n            </Link>\n        </div>\n    );\n}\n\nclass FaultReport extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            currentChoice: 0,\n            choices: [\n                {   \n                    1: 'Lägenheten',\n                    2: 'Delade utrymmen',\n                    3: 'Utomhus',\n                },\n                {   \n                    4: 'Kök',\n                    5: 'Badrum',\n                    6: 'Sovrum',\n                },\n                {   \n                    7: 'Tvättstuga',\n                    8: 'Trapphus',\n                    9: 'Soprum',\n                },\n                {   \n                    10: 'Nerskräpning',\n                    11: 'Trasigt staket',\n                    12: 'Galna katter',\n                }\n            ]\n        };\n\n    }\n\n    handleClick = (idx) => {\n        this.setState({currentChoice: idx});\n    }\n\n    getTextbox = () => {\n        return (\n            <div className=\"FaultReportText\">\n                Beskriv problemet:<br/>\n                <textarea rows=\"20\" cols=\"50\" />\n                <br/>\n                <button>Skicka</button>\n            </div>\n        );\n    }\n    \n    getChoices = (idx) => {\n        if(idx < this.state['choices'].length) {\n            const res = Object.keys(this.state.choices[idx]).map( \n                function(key, index) {\n                return (<div className=\"FaultReportChoicesItem\"\n                    key={key}\n                    onClick={()=>this.handleClick(key)}>\n                        {this.state['choices'][idx][key]}\n                    </div>)\n            }, this);\n            return res;\n        } else {\n            return this.getTextbox();\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"FaultReport\">\n                <h1>Felanmälan</h1>\n                <div className=\"FaultReportChoices\">\n                    {this.getChoices(this.state['currentChoice'])}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst Post = (props) => {\n    return (\n        <div className=\"Post\">\n            <div className=\"PostHeader\">\n                {props.header}\n            </div>\n            <div className=\"PostBody\">\n                {props.body}\n            </div>\n        </div>\n    );\n}\n\nconst Wall = () => {\n    return (\n        <div className=\"Wall\">\n            <h1>Meddelanden</h1>\n            <Post header=\"Felanmälningar\" body=\"Felanmälan kategorieras automatiskt\n        vilket ger oss möjligheten att analysera och bearbeta data för att senare\n        göra bättre val!\" />\n\n            <Post header=\"Bokningar\" body=\"Boka tvättstuga, cykelpumpen eller \n        föreningens lokal direkt i appen!\" />\n\n            <Post header=\"Hej\" body=\"Välkommen till Nejbor 2.0\" />\n        </div>\n    );\n}\n\nconst Bookable = (props) => {\n    return (\n        <div className=\"Bookable\">\n            <div className=\"BookableHeader\">\n                {props.header}\n            </div>\n            <div className=\"BookableBody\">\n                {props.body}\n            </div>\n        </div>\n    );\n}\n\nconst BookingBookables = () => {\n    return (\n        <div className=\"Booking\">\n            <h1>Bokningar</h1>\n            <Link className=\"BookableItem\" to=\"/booking/1\">\n                <Bookable header=\"Tvättstuga\" body=\"\" />\n            </Link>\n            <Link className=\"BookableItem\" to=\"/booking/2\">\n                <Bookable header=\"Föreningslokal\" body=\"\" />\n            </Link>\n            <Link className=\"BookableItem\" to=\"/booking/3\">\n                <Bookable header=\"Gräsklippare\" body=\"\" />\n            </Link>\n        </div>\n    );\n}\n\n\nconst BookableSelected = (props) => {\n    const Schedule = () => {\n        let days = [];\n        for(let i = 1; i <= 30; i++) {\n            days.push(<div className=\"BookableScheduleDay\" key={i} >{i}</div>);   \n        }\n        return (<div className=\"BookableScheduleMonth\">{days}</div>);\n    }\n\n    const getHeader = (id) => {\n        if(parseInt(id) === 1) {\n            return (<h1>Tvättstuga</h1>);\n        } else if(parseInt(id) === 2) {\n            return (<h1>Föreningslokal</h1>);\n        } else {\n            return (<h1>Gräsklippare</h1>);\n        }\n    }\n\n    return (\n        <div className=\"BookableSelected\">\n            <div className=\"BookableSelectedHeader\">\n                {getHeader(props.match.params.id)}\n            </div>\n            <div className=\"BookableSelectedSchedule\">\n                {Schedule()}\n            </div>\n        </div>\n    );\n}\n\nconst Booking = (props) => {\n    return (\n        <Switch>\n            <Route path='/booking/:id' component={BookableSelected}/>\n            <Route path='/booking' component={BookingBookables}/>\n        </Switch>\n    );\n}\n\nconst Profile = () => {\n    return (\n        <div className=\"Profile\">\n            <div className=\"ProfileName\">\n                Nejsan Borlen\n            </div>\n            <div className=\"ProfilePicture\">\n                <i class=\"fas fa-user\"></i>\n            </div>\n            <div className=\"ProfileData\">\n                Nejborvägen 13, Stockholm.\n                <br/>\n                Hyra: 0kr\n                <br/>\n                Lösenord: 123qwerty\n                <br/>\n            </div>\n        </div>\n    );\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Screen\">\n            <div>\n                <Switch>\n                    <Route exact path='/' component={Wall}/>\n                    <Route path='/faultreport' component={FaultReport}/>\n                    <Route path='/booking/:id' component={Booking}/>\n                    <Route path='/booking' component={Booking}/>\n                    <Route path='/profile' component={Profile}/>\n                </Switch>\n            </div>\n            <MenuBar/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}