{"version":3,"sources":["img/logo.png","Report.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Issue","id","text","answers","_this","this","Object","classCallCheck","setConflicts","conflicts","getConflicts","getAnswer","questionId","getText","Question","shortdesc","_this2","getId","setAsked","asked","getAsked","getDescription","Report","_this3","getQuestionText","currentQuestion","getQuestionDescription","hasMoreQuestions","moreQuestions","hasIssueSuggestion","issueSuggestion","nextQuestion","best_score","best_question_id","questionFound","q","questions","counter","i","issues","issue","posprob","length","score","Math","log","getIssueSuggestion","suggestions","setSuggestionAnswer","foundIssue","setQuestionAnswer","answer","getResult","FaultReport","props","possibleConstructorReturn","getPrototypeOf","call","handleClick","idx","setState","currentChoice","getTextbox","react_default","a","createElement","className","rows","cols","getNextQuestion","state","getQuestion","answerReport","push","console","qcount","answerSuggestion","handleChange","e","defineProperty","target","name","value","sendReport","preventDefault","templateParams","from_name","to_name","report_id","floor","random","message_html","to_email","problem","emailjs","then","response","status","err","report","textarea_value","textname_value","textemail_value","positive_answers","getQuestions","onClick","res","keys","map","key","index","assertThisInitialized","type","onChange","accept","capture","src","Logotype","alt","Component","App","App_FaultReport","Boolean","window","location","hostname","match","ReactDOM","render","HashRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.24993962.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.896b6e24.png\";","/**\n *  An actual issue.\n *  Conflicts is true if the issue conflicts to an answer of\n *  at least on question.\n *  answers is a list of true/false for each question.\n */\nclass Issue {\n    constructor(id, text, answers) {\n        this.id = id;\n        this.text = text;\n        this.conflicts = false;\n        this.answers = answers;\n    }\n\n    setConflicts = () => {\n        this.conflicts = true;\n    }\n\n    getConflicts = () => {\n        return this.conflicts;\n    }\n\n    getAnswer = (questionId) => {\n        return this.answers[questionId] === 1 ? true : false;\n    }\n\n    getText = () => {\n        return this.text;\n    }\n}\n\n/** \n *  A question.\n *  id: an id\n *  text: the actual question\n *  shortdesc: an short description\n */\nclass Question {\n    constructor(id, text, shortdesc) {\n        this.id = id;\n        this.text = text;\n        this.asked = false;\n        this.shortdesc = shortdesc;\n    }\n\n    getId = () => {\n        return this.id;\n    }\n\n    setAsked = () => {\n        this.asked = true;\n    }\n\n    getAsked = () => {\n        return this.asked;\n    }\n\n    getText = () => {\n        return this.text;\n    }\n\n    getDescription = () => {\n        return this.shortdesc;\n    }\n}\n\n/**\n *  The fault report AI, aka För Valter.\n *  Handles which question should be asked\n *  and find the issue.\n *\n *  Questions and issues should be fetched from backend?\n */\nclass Report {\n    constructor() {\n        this.questions = [\n            new Question(0, \"Är problemet inomhus?\", \"Inomhus\"),\n            new Question(1, \"Är problemet i lägenheten?\", \"I lägenheten\"),\n            new Question(2, \"Är problemet i badrummet?\", \"I badrummet\"),\n            new Question(3, \"Är problemet i köket?\", \"I köket\"),\n            new Question(4, \"Är problemet i tvättstugan?\", \"I tvättstugan\"),\n            new Question(5, \"Har du problem med en vitvara?\", \"En vitvara\"),\n            new Question(6, \"Har du problem med el?\", \"Elen\"),\n            new Question(7, \"Har du problem med vatten?\", \"Vattnen\"),\n        ];\n\n        this.issues = [\n            new Issue(0, \"Badkar\",              [1, 1, 1, 0, 0, 0, 0, 0]),\n            new Issue(1, \"Spisen\",              [1, 1, 0, 1, 0, 1, 0, 0]),\n            new Issue(2, \"Tvättmaskin\",         [1, 1, 1, 0, 0, 1, 0, 0]),\n            new Issue(3, \"Nerskräpning\",        [0, 0, 0, 0, 0, 0, 0, 0]),\n            new Issue(4, \"Delad tvättmaskin\",   [1, 0, 0, 0, 1, 1, 0, 0]),\n            new Issue(5, \"Delad torktumlare\",   [1, 0, 0, 0, 1, 1, 0, 0]),\n            new Issue(6, \"Torktumlare\",         [1, 1, 1, 0, 0, 1, 0, 0]),\n            new Issue(7, \"Spisfläkt\",           [1, 1, 0, 1, 0, 1, 0, 0]),\n        ];\n\n        this.moreQuestions = true;\n        this.issueSuggestion = false;\n        this.foundIssue = null;\n        this.currentQuestion = this.questions[0];\n        this.questions[0].setAsked();\n    }\n        \n    /**\n     *  Get the text for current question.\n     */\n    getQuestionText = () => {\n        return this.currentQuestion.getText();\n    }\n\n    /**\n     *  Get the description for current question.\n     */\n    getQuestionDescription = () => {\n        return this.currentQuestion.getDescription();\n    }\n\n    /**\n     *  Returns if there are more questions that\n     *  can be asked.\n     */\n    hasMoreQuestions = () => {\n        return this.moreQuestions;\n    }\n\n    hasIssueSuggestion = () => {\n        return this.issueSuggestion;\n    }\n\n    /**\n     *  Find the next question to ask.\n     *  Base on:\n     *  - The question is not already asked.\n     *  - There are issue that depend on the question.\n     */\n    nextQuestion = () => {\n\n        // look for a unasked question\n        let best_score = 0;\n        let best_question_id = -1;\n        let questionFound = false;\n        const eps = 0.00000000001;\n        for(let q in this.questions) {\n            let question = this.questions[q];\n            if(!question.getAsked()) {\n\n                // Make sure the question is the most relevant one\n                let counter = 0;\n                for(let i in this.issues) {\n                    let issue = this.issues[i];\n                    if(!issue.getConflicts() && issue.getAnswer(q)) {\n                        counter++;\n                    }\n                }\n                const posprob = counter/this.issues.length;\n                const score = \n                    -(posprob)*Math.log(posprob+eps) \n                    +(1-posprob)*Math.log(1-posprob+eps);\n                if (score > best_score && counter !== 0) {\n                    best_score = score;\n                    best_question_id = q;\n                    questionFound = true;\n                }\n            }\n        }\n\n        if(questionFound) {\n            this.currentQuestion = this.questions[best_question_id];\n            this.questions[best_question_id].setAsked();\n        } else {\n            this.moreQuestions = false;\n            for (let i in this.issues) {\n                if(!this.issues[i].getConflicts()) {\n                    this.issueSuggestion = true;\n                }\n            }\n        }\n    }\n\n    /** \n     *  Returns an object of all issues left.\n     *  IMPROVEMENT: Only return the 5 most likely.\n     */\n    getIssueSuggestion = () => {\n        let suggestions = {};\n        for (let i in this.issues) {\n            let issue = this.issues[i];\n            if(!issue.getConflicts()) {\n                suggestions[i] = issue.getText();\n            }\n        }\n        return suggestions;\n    }\n\n    /**\n     *  Get the answer from the suggested issues.\n     */\n    setSuggestionAnswer = (id) => {\n        // chose id\n        if(id !== -1) {\n            this.foundIssue = this.issues[id];\n        }\n        this.issueSuggestion = false;   \n    }\n\n    /**\n     *  Mark issues that conflicts to the answer\n     *  of the current question.\n     */\n    setQuestionAnswer = (answer) => {\n        for(let i in this.issues) {\n            let issue = this.issues[i];\n            if(issue.getAnswer(this.currentQuestion.getId()) !== answer) {\n                issue.setConflicts();\n            }\n        }\n    }\n\n    /**\n     *  Returns the 'most likely' issue.\n     *  'most likely' right now is just the first\n     *  issue that is not marked.\n     */\n    getResult = () => {\n        if(this.foundIssue !== null) {\n            return this.foundIssue.getText();\n        }\n        return null;\n    }\n}\n\nexport default Report;\n","import React, { Component } from 'react';\nimport Report from './Report';\nimport './App.css';\nimport Logotype from './img/logo.png';\nimport * as emailjs from 'emailjs-com';\n\nclass FaultReport extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            report: new Report(),\n            qcount: 0, // Just to update the component\n            textarea_value: '',\n            textname_value: '',\n            textemail_value: '',\n            positive_answers: [],\n        };\n\n    }\n\n    handleClick = (idx) => {\n        this.setState({currentChoice: idx});\n    }\n\n    getTextbox = () => {\n        return (\n            <div className=\"FaultReportText\">\n            <div className=\"FaultReportHeader\">Beskriv problemet:</div>\n            <textarea rows=\"20\" cols=\"50\" />\n            <br/>\n            <button className=\"FaultReportButton\">Skicka</button>\n            </div>\n        );\n    }\n\n    getNextQuestion = () => {\n        let q = this.state['report'].getQuestion();\n        if(q != null) {\n            this.setState({currentQuestion: q});\n        } else {\n            this.setState({moreQuestions: false});\n        }\n    }\n\n    answerReport = (answer) => {\n        if(answer) {\n            this.state['positive_answers'].push(\n                this.state['report'].getQuestionDescription());\n        }\n        console.log(this.state['positive_answers']);\n        this.state['report'].setQuestionAnswer(answer);\n        this.state['report'].nextQuestion();\n        this.setState({'qcount': this.state['qcount'] + 1}); // update component\n    }\n\n    answerSuggestion = (id) => {\n        this.state['report'].setSuggestionAnswer(id); \n        this.setState({'qcount': this.state['qcount'] + 1});\n    }\n\n    getResult = () => {\n        if(this.state['report'].getResult() != null) {\n            return (<span>Valt problem: {this.state['report'].getResult()}</span>);\n        } else {\n            return (<span>Vi hittade inte ditt problem.</span>);\n        }\n    }\n\n    handleChange = (e) => {\n        this.setState({[e.target.name]: e.target.value});\n    }\n\n    sendReport = (e) => {\n        e.preventDefault();\n        let templateParams = {\n            from_name: \"Nejbor\",\n            to_name: this.state['textname_value'],\n            report_id: Math.floor(Math.random() * 1000) + 100,\n            message_html: this.state['textarea_value'],\n            to_email: this.state['textemail_value'],\n            problem: '',\n            answers: '',\n        };\n\n        if (this.state['report'].getResult() !== null) {\n            templateParams['problem'] = this.state['report'].getResult();\n        }\n\n        templateParams['answers'] += \"<ul>\";\n        for (let i in this.state['positive_answers']) {\n            templateParams['answers'] += \n                \"<li>\" + this.state['positive_answers'][i] + \"</li>\";\n        }\n        templateParams['answers'] += \"</ul>\";\n\n        emailjs.send(\n            'gmail', \n            'template_7tYScFrN', \n            templateParams, \n            'user_z3koOKn5N8lxWwWIlvVob')\n            .then(function (response) {\n                console.log(\"Success!\", response.status, response.text);\n            }, function(err) {\n                console.log(err);\n            }\n        );\n\n        this.setState({report: new Report()});\n        this.setState({qcount: 0});\n        this.setState({textarea_value: ''});\n        this.setState({textname_value: ''});\n        this.setState({textemail_value: ''});\n        this.setState({positive_answers: []});\n    }\n\n    getQuestions = () => {\n        if(this.state['report'].hasMoreQuestions()) {\n            return (\n                <div className=\"FaultReportQuestions\">\n                <div className=\"FaultReportQuestionsQuestion\">\n                {this.state['report'].getQuestionText()}\n                </div>\n                <div className=\"FaultReportQuestionsChoices\">\n                <div className=\"FaultReportQuestionsItem\"\n                onClick={()=>this.answerReport(true)}>\n                <div className=\"FaultReportQuestionsItemText\">\n                Ja\n                </div>\n                </div>\n                <div className=\"FaultReportQuestionsItem\"\n                onClick={()=>this.answerReport(false)}>\n                <div className=\"FaultReportQuestionsItemText\">\n                Nej\n                </div>\n                </div>\n                </div>\n                </div>\n            );\n        } else if (this.state['report'].hasIssueSuggestion()) {\n            const issues = this.state['report'].getIssueSuggestion();\n            const res = Object.keys(issues).map( \n                function(key, index) {\n                return (<div className=\"FaultReportSuggestionItem\"\n                    key={key}\n                    onClick={()=>this.answerSuggestion(key)}>\n                    {issues[key]}\n                    </div>);\n            }, this);\n            return(\n                <div className=\"FaultReportSuggestion\">\n                    Har du problem med något av följande?\n                    <div className=\"FaultReportSuggestionChoices\">\n                        {res}\n                        <div className=\"FaultReportSuggestionItem NegChoice\"\n                            onClick={()=>this.answerSuggestion(-1)}>\n                            Nej\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"FaultReportResult\">\n                <div className=\"FaultReportResultQuestion\">\n                {this.getResult()}\n                </div>\n                <div className=\"FaultReportResultInput\">\n                <br/>\n                Namn:\n                <br/>\n                <input \n                    type=\"text\"\n                    name=\"textname_value\"\n                    onChange={(e)=>this.handleChange(e)}/>\n                <br/>\n                Email:\n                <br/>\n                <input \n                    type=\"email\"\n                    name=\"textemail_value\"\n                    onChange={(e)=>this.handleChange(e)}/>\n                <br/>\n                Lägg till bild: \n                <br/>\n                <input type=\"file\" accept=\"image/*\" capture/>\n                <br/>\n                <br/>\n                Beskriv problemet:\n                <br/>\n                <br/>\n                <textarea \n                    rows=\"10\" cols=\"40\"\n                    name=\"textarea_value\"\n                    onChange={(e)=>this.handleChange(e)}/>\n                <br/>\n                <br/>\n                <button type=\"button\"\n                onClick={(e)=>this.sendReport(e)}>\n                Skicka Felanmälan</button\n                >\n                </div>\n                </div>\n            );\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"FaultReport\">\n            <img src={Logotype} alt=\"\"/>\n            <h1 className=\"FaultReportTitle\">Felanmälan</h1>\n            {this.getQuestions()}\n            </div>\n        );\n    }\n}\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n            <div className=\"Screen\">\n            <FaultReport />\n            </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}