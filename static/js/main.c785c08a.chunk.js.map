{"version":3,"sources":["img/logo.png","Report.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Issue","id","text","answers","_this","this","Object","classCallCheck","setConflicts","conflicts","getConflicts","getAnswer","questionId","getText","Question","_this2","getId","setAsked","asked","getAsked","Report","_this3","getQuestionText","questions","currentQuestion","hasMoreQuestions","moreQuestions","nextQuestion","best_score","best_question_id","questionFound","q","counter","i","issues","issue","posprob","length","score","Math","log","setQuestionAnswer","answer","getResult","FaultReport","props","possibleConstructorReturn","getPrototypeOf","call","handleClick","idx","setState","currentChoice","getTextbox","react_default","a","createElement","className","rows","cols","getNextQuestion","state","getQuestion","answerReport","qcount","getQuestions","onClick","type","report","src","Logotype","Component","App","App_FaultReport","Boolean","window","location","hostname","match","ReactDOM","render","HashRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c785c08a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.896b6e24.png\";","/**\n *  An actual issue.\n *  Conflicts is true if the issue conflicts to an answer of\n *  at least on question.\n *  answers is a list of true/false for each question.\n */\nclass Issue {\n    constructor(id, text, answers) {\n        this.id = id;\n        this.text = text;\n        this.conflicts = false;\n        this.answers = answers;\n    }\n\n    setConflicts = () => {\n        this.conflicts = true;\n    }\n\n    getConflicts = () => {\n        return this.conflicts;\n    }\n\n    getAnswer = (questionId) => {\n        return this.answers[questionId] === 1 ? true : false;\n    }\n\n    getText = () => {\n        return this.text;\n    }\n}\n\n/** \n *  A question.\n */\nclass Question {\n    constructor(id, text) {\n        this.id = id;\n        this.text = text;\n        this.asked = false;\n    }\n\n    getId = () => {\n        return this.id;\n    }\n\n    setAsked = () => {\n        this.asked = true;\n    }\n\n    getAsked = () => {\n        return this.asked;\n    }\n\n    getText = () => {\n        return this.text;\n    }\n}\n\n/**\n *  The fault report AI, aka För Valter.\n *  Handles which question should be asked\n *  and find the issue.\n *\n *  Questions and issues should be fetched from backend?\n */\nclass Report {\n    constructor() {\n        this.questions = [\n            new Question(0, \"Är problemet inomhus?\"),\n            new Question(1, \"Är problemet i lägenheten?\"),\n            new Question(2, \"Är problemet i badrummet?\"),\n            new Question(3, \"Är problemet i köket?\"),\n            new Question(4, \"Är problemet i tvättstugan?\"),\n            new Question(5, \"Har du problem med en vitvara?\"),\n        ];\n\n        this.issues = [\n            new Issue(0, \"Badkar\",              [1, 1, 1, 0, 0, 0]),\n            new Issue(1, \"Spisen\",              [1, 1, 0, 1, 0, 1]),\n            new Issue(2, \"Tvättmaskin\",         [1, 1, 1, 0, 0, 1]),\n            new Issue(3, \"Nerskräpning\",        [0, 0, 0, 0, 0, 0]),\n            new Issue(4, \"Delad tvättmaskin\",   [1, 0, 0, 0, 1, 1]),\n            new Issue(5, \"Delad torktumlare\",   [1, 0, 0, 0, 1, 1]),\n            new Issue(6, \"Torktumlare\",         [1, 1, 1, 0, 0, 1]),\n            new Issue(7, \"Spisfläkt\",           [1, 1, 0, 1, 0, 1]),\n        ];\n\n        this.moreQuestions = true;\n        this.currentQuestion = 0;\n        this.questions[0].setAsked();\n    }\n        \n    /**\n     *  Get the text for current question.\n     */\n    getQuestionText = () => {\n        return this.questions[this.currentQuestion].getText();\n    }\n\n    /**\n     *  Returns if there are more questions that\n     *  can be asked.\n     */\n    hasMoreQuestions = () => {\n        return this.moreQuestions;\n    }\n\n    /**\n     *  Find the next question to ask.\n     *  Base on:\n     *  - The question is not already asked.\n     *  - There are issue that depend on the question.\n     */\n    nextQuestion = () => {\n\n        // look for a unasked question\n        let best_score = 0;\n        let best_question_id = -1;\n        let questionFound = false;\n        const eps = 0.00000000001;\n        for(let q in this.questions) {\n            let question = this.questions[q];\n            if(!question.getAsked()) {\n\n                // Make sure the question is the most relevant one\n                let counter = 0;\n                for(let i in this.issues) {\n                    let issue = this.issues[i];\n                    if(!issue.getConflicts() && issue.getAnswer(q)) {\n                        counter++;\n                    }\n                }\n                const posprob = counter/this.issues.length;\n                const score = \n                    -(posprob)*Math.log(posprob+eps) \n                    +(1-posprob)*Math.log(1-posprob+eps);\n                if (score > best_score && counter != 0) {\n                    best_score = score;\n                    best_question_id = q;\n                    questionFound = true;\n                }\n            }\n        }\n\n        if(questionFound) {\n            this.currentQuestion = best_question_id;\n            this.questions[best_question_id].setAsked();\n        } else {\n            this.moreQuestions = false;\n        }\n    }\n\n    /**\n     *  Mark issues that conflicts to the answer\n     *  of the current question.\n     */\n    setQuestionAnswer = (answer) => {\n        for(let i in this.issues) {\n            let issue = this.issues[i];\n            if(issue.getAnswer(this.currentQuestion) !== answer) {\n                issue.setConflicts();\n            }\n        }\n    }\n\n    /**\n     *  Returns the 'most likely' issue.\n     *  'most likely' right now is just the first\n     *  issue that is not marked.\n     */\n    getResult = () => {\n        for(let i in this.issues) {\n            let issue = this.issues[i];\n            if(!issue.getConflicts()) {\n                return issue.getText();\n            }\n        }\n        return null;\n    }\n}\n\nexport default Report;\n","import React, { Component } from 'react';\nimport Report from './Report';\nimport './App.css';\nimport Logotype from './img/logo.png';\n\nclass FaultReport extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            report: new Report(),\n            qcount: 0, // Just to update the component\n        };\n\n    }\n\n    handleClick = (idx) => {\n        this.setState({currentChoice: idx});\n    }\n\n    getTextbox = () => {\n        return (\n            <div className=\"FaultReportText\">\n                <div className=\"FaultReportHeader\">Beskriv problemet:</div>\n                <textarea rows=\"20\" cols=\"50\" />\n                <br/>\n                <button className=\"FaultReportButton\">Skicka</button>\n            </div>\n        );\n    }\n\n    getNextQuestion = () => {\n        let q = this.state['report'].getQuestion();\n        if(q != null) {\n            this.setState({currentQuestion: q});\n        } else {\n            this.setState({moreQuestions: false});\n        }\n    }\n\n    answerReport = (id) => {\n        this.state['report'].setQuestionAnswer(id);\n        this.state['report'].nextQuestion();\n        this.setState({'qcount': this.state['qcount'] + 1}); // update component\n    }\n\n    getResult = () => {\n        if(this.state['report'].getResult() != null) {\n            return (<span>Har du problem med {this.state['report'].getResult()}?</span>);\n        } else {\n            return (<span>Vi hittade inte ditt problem.</span>);\n        }\n    }\n\n    getQuestions = () => {\n        if(this.state['report'].hasMoreQuestions()) {\n            return (\n                <div className=\"FaultReportQuestions\">\n                    <div className=\"FaultReportQuestionsQuestion\">\n                        {this.state['report'].getQuestionText()}\n                    </div>\n                    <div className=\"FaultReportQuestionsChoices\">\n                        <div className=\"FaultReportQuestionsItem\"\n                            onClick={()=>this.answerReport(true)}>\n                            <div className=\"FaultReportQuestionsItemText\">\n                                Ja\n                            </div>\n                        </div>\n                        <div className=\"FaultReportQuestionsItem\"\n                            onClick={()=>this.answerReport(false)}>\n                            <div className=\"FaultReportQuestionsItemText\">\n                                Nej\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"FaultReportResult\">\n                    <div className=\"FaultReportResultQuestion\">\n                        {this.getResult()}\n                    </div>\n                    <div className=\"FaultReportResultInput\">\n                    <br/>\n                    Beskriv problemet:\n                    <br/>\n                    <br/>\n                    <textarea rows=\"20\" cols=\"40\" />\n                    <br/>\n                    <br/>\n                    <button type=\"button\">Skicka Felanmälan</button>\n                    </div>\n                </div>\n            );\n        }\n    }\n    \n    render() {\n        return (\n            <div className=\"FaultReport\">\n                <img src={Logotype} />\n                <h1 className=\"FaultReportTitle\">Felanmälan</h1>\n                {this.getQuestions()}\n            </div>\n        );\n    }\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Screen\">\n                <FaultReport />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n    <Router>\n        <App />\n    </Router>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}